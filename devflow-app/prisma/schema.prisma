// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URLanlcbftvzecxyvjbmtzy.supabase.co:5432")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
  columns       Column[]
  tasks         Task[]
  subtasks      Subtask[]
  profiles      Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id        String  @id @default(cuid())
  user_id   String  @unique
  username  String? @unique
  avatar_url String?
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Board {
  id          String    @id @default(cuid())
  uuid        String    @unique @default(cuid())
  created_at  DateTime? @default(now()) @db.Timestamptz(0)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamptz(0)
  name        String    @db.VarChar(255)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns     Column[]

  @@index([userId])
}

model Column {
  id          String    @id @default(cuid())
  uuid        String    @unique @default(cuid())
  created_at  DateTime? @default(now()) @db.Timestamptz(0)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamptz(0)
  name        String    @db.VarChar(255)
  board_uuid  String
  board       Board     @relation(fields: [board_uuid], references: [uuid], onDelete: Cascade)
  position    Int
  color       String    @db.VarChar(255)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@index([board_uuid])
  @@index([userId])
}

model Task {
  id          String    @id @default(cuid())
  uuid        String    @unique @default(cuid())
  created_at  DateTime? @default(now()) @db.Timestamptz(0)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamptz(0)
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(1023)
  position    Int
  column_uuid String
  column      Column    @relation(fields: [column_uuid], references: [uuid], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtasks    Subtask[]

  @@index([column_uuid])
  @@index([userId])
}

model Subtask {
  id          String    @id @default(cuid())
  uuid        String    @unique @default(cuid())
  created_at  DateTime? @default(now()) @db.Timestamptz(0)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamptz(0)
  name        String    @db.VarChar(255)
  task_uuid   String
  task        Task      @relation(fields: [task_uuid], references: [uuid], onDelete: Cascade)
  completed   Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([task_uuid])
  @@index([userId])
}